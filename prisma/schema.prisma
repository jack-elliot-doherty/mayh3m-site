// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model NewsletterSubscriber {
    id        String   @id @default(cuid())
    email     String   @unique
    createdAt DateTime @default(now())
}

model Drop {
    id           String        @id @default(cuid())
    name         String
    description  String
    image        String
    capacity     Int           @default(100)
    status       String        @default("PENDING")
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    applications Application[]
}

model Application {
    id        String   @id @default(cuid())
    userId    String
    dropId    String
    why       String
    status    String   @default("PENDING")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    drop      Drop     @relation(fields: [dropId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([dropId])
}

model ApplicantVerificationToken {
    id          String @id @default(cuid())
    applicantId String
    token       String @unique
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String        @unique
    role          String        @default("USER")
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    applications  Application[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
